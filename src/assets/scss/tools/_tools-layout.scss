/* Tools - Layout
------------------------- */

// Functions
// -------------------------

/// @function t-get-vertical-spacing-type-adjust
/// Returns the difference between the font-size and line-height for a given breakpoint.
///
/// @access public
/// @param {String} $type-size- A String which represents a type size label in the $s-type-sizing map.
/// @param {String} - A String which represents a breakpoint label of the give $type-size within the $s-type-sizing map.
/// @return {Number} - The difference between font-size and line-height expressed in the appropriate unit.
///
/// @example
/// t-get-vertical-spacing-type-adjust(small, medium);
@function t-get-vertical-spacing-type-adjust($type-size, $breakpoint-name) {

	$font-size: t-map-value($s-type-sizing, ($type-size, $breakpoint-name, font-size));
	$line-height: t-map-value($s-type-sizing, ($type-size, $breakpoint-name, line-height));

	@if unitless($line-height) {
		$line-height: $line-height * $font-size;
	}

	@return ($line-height - $font-size) / 2;
}

/// @function t-get-vertical-spacing
/// Returns the correct spacing units for a given spacing and breakpoint label with an optional type size adjustment.
///
/// @access public
/// @param {String} $spacing-name - A String which represents a spacing label in the $s-vertical-layout-spacing map.
/// @param {String} $breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map in which to reference the correct result.
/// @param {String} $type-size - A String which represents a type size label in the $s-type-sizing map. (Optional)
/// @return {Number} - The difference between font-size and line-height expressed in the appropriate unit.
///
/// @example
/// t-get-vertical-spacing(small, medium);
@function t-get-vertical-spacing($spacing-name, $breakpoint-name: small, $type-size: null) {

	@if(map-has-key($s-breakpoints, $breakpoint-name)) {
		$spacing: t-map-value($s-vertical-layout-spacing, ($spacing-name, $breakpoint-name));
		$adjust: 0;

		@if($type-size != null) {
			$adjust: t-get-vertical-spacing-type-adjust($type-size, $breakpoint-name);
		}

		@return t-rem($spacing - $adjust);
	}

	@return null;
}

// Mixins
// -------------------------

/// @mixin t-vertical-spacing
/// Provides the correct layout spacing to all referenced breakpoints from cross referencing $s-breakpoints and $s-vertical-layout-spacing maps with an optional $type-size parameter to adjust for line height differences.
///
/// @access public
/// @param {String} $spacing-name - A String which represents a spacing label in the $s-vertical-layout-spacing map.
/// @param {List} $props - A List of CSS properties in which to apply the resulting units.
/// @param {String} $type-size - A String which represents a type size label in the $s-type-sizing map. (Optional)
/// @param {String} $default-breakpoint-name - A String which represents a breakpoint label in the $s-breakpoints map in which to apply default styling. (Optional)
///
/// @example
///	@include t-vertical-spacing(small, (margin-bottom, padding-bottom));
@mixin t-vertical-spacing($spacing-name, $props, $type-size: null, $default-breakpoint-name: 'small') {

	@each $prop in $props {

		$default-spacing: t-get-vertical-spacing($spacing-name, $default-breakpoint-name, $type-size);

		@if($default-spacing != null) {
			#{$prop}: $default-spacing;
		}
	}

	@each $breakpoint-name in map-keys(map-get($s-vertical-layout-spacing, $spacing-name)) {

		@if $breakpoint-name != $default-breakpoint-name {

			$spacing: t-get-vertical-spacing($spacing-name, $breakpoint-name, $type-size);

			@if($spacing != null) {
				@include t-respond-to-min($breakpoint-name) {

					@each $prop in $props {
						#{$prop}: $spacing;
					}
				}
			}
		}
	}
}

/// @mixin t-layer
/// Provides the correct global z-index given a level parameter and optional modifier.
///
/// @access public
/// @param {Number} $level - A key which identifies the base z-index.
/// @param {Number} $modifier - An optional modifier to increase the base z-index level by the given number.
///
/// @example
/// @include t-layer(2, 1);
@mixin t-layer($level: 0, $modifier: 0) {
	z-index: map-get($s-layers, $level) + $modifier;
}

/// @mixin t-inline-container
/// To be applied to the container of inline-block elements, eliminating the additional horizontal space.
///
/// @access public
///
/// @example
/// @include t-inline-container;
@mixin t-inline-container {
	letter-spacing: -0.31em;
}

/// @mixin t-inline-item
/// To be applied to inline-block elements as descendants of t-inline-container to restore normal letter-spacing.
///
/// @access public
/// @param {String} $vertical-align - The vertical alignment of the elements.
///
/// @example
/// @include t-inline-container;
@mixin t-inline-item($vertical-align: top) {
	display: inline-block;
	letter-spacing: normal;
	vertical-align: $vertical-align;
}

// @mixin  t-maintain-ratio
// Maintains a fixed ratio on an element.
//
// @access public
// @param {Number Number} $ratio - The ratio determined by width and height.
//
// @example
// @include maintain-ratio(16 9);
@mixin t-maintain-ratio($ratio: 1 1) {

	@if length($ratio) < 2 or length($ratio) > 2 {
		@warn "$ratio must be a list with two values.";
	}

	height: 0;
	overflow: hidden;
	padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
	position: relative;
	width: 100%;
}

/// @mixin t-site-constraint
/// Applies a maximum site width and outer gutters to be used on outer elements.
///
/// @access public
///
/// @example
///	@include t-site-constraint;
@mixin t-site-constraint {
	@include t-block-center;
	max-width: (map-get($s-document-layout, max-content-width) + ($grids-gutter * 2));
	padding-left: t-rem($grids-gutter);
	padding-right: t-rem($grids-gutter);

	@include t-respond-to-min(large) {
		padding-left: t-rem($grids-gutter * 2);
		padding-right: t-rem($grids-gutter * 2);
	}

	&--full {
		padding: 0;

		@include t-respond-to-min(large) {
			padding: 0;
		}
	}

	&--relative {
		position: relative;
	}
}
